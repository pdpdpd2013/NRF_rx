
NRF24L01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080006e  0080006e  00000490  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005f  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000014a  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000063b  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000208  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006e5  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b3  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000348  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  8a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <NUMTOSEG7>:

/* ================= function ================== */

unsigned char NUMTOSEG7(unsigned char DATA)
{ unsigned char AA;
	switch (DATA)
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	d1 f1       	breq	.+116    	; 0x10a <NUMTOSEG7+0x78>
  96:	89 30       	cpi	r24, 0x09	; 9
  98:	90 f4       	brcc	.+36     	; 0xbe <NUMTOSEG7+0x2c>
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	61 f1       	breq	.+88     	; 0xf6 <NUMTOSEG7+0x64>
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	28 f4       	brcc	.+10     	; 0xac <NUMTOSEG7+0x1a>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	11 f1       	breq	.+68     	; 0xea <NUMTOSEG7+0x58>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	20 f5       	brcc	.+72     	; 0xf2 <NUMTOSEG7+0x60>
  aa:	21 c0       	rjmp	.+66     	; 0xee <NUMTOSEG7+0x5c>
  ac:	85 30       	cpi	r24, 0x05	; 5
  ae:	39 f1       	breq	.+78     	; 0xfe <NUMTOSEG7+0x6c>
  b0:	85 30       	cpi	r24, 0x05	; 5
  b2:	18 f1       	brcs	.+70     	; 0xfa <NUMTOSEG7+0x68>
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	29 f1       	breq	.+74     	; 0x102 <NUMTOSEG7+0x70>
  b8:	87 30       	cpi	r24, 0x07	; 7
  ba:	d9 f5       	brne	.+118    	; 0x132 <NUMTOSEG7+0xa0>
  bc:	24 c0       	rjmp	.+72     	; 0x106 <NUMTOSEG7+0x74>
  be:	8d 30       	cpi	r24, 0x0D	; 13
  c0:	71 f1       	breq	.+92     	; 0x11e <NUMTOSEG7+0x8c>
  c2:	8e 30       	cpi	r24, 0x0E	; 14
  c4:	48 f4       	brcc	.+18     	; 0xd8 <NUMTOSEG7+0x46>
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	21 f1       	breq	.+72     	; 0x112 <NUMTOSEG7+0x80>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	00 f1       	brcs	.+64     	; 0x10e <NUMTOSEG7+0x7c>
  ce:	8b 30       	cpi	r24, 0x0B	; 11
  d0:	11 f1       	breq	.+68     	; 0x116 <NUMTOSEG7+0x84>
  d2:	8c 30       	cpi	r24, 0x0C	; 12
  d4:	71 f5       	brne	.+92     	; 0x132 <NUMTOSEG7+0xa0>
  d6:	21 c0       	rjmp	.+66     	; 0x11a <NUMTOSEG7+0x88>
  d8:	8f 30       	cpi	r24, 0x0F	; 15
  da:	29 f1       	breq	.+74     	; 0x126 <NUMTOSEG7+0x94>
  dc:	8f 30       	cpi	r24, 0x0F	; 15
  de:	08 f1       	brcs	.+66     	; 0x122 <NUMTOSEG7+0x90>
  e0:	8d 32       	cpi	r24, 0x2D	; 45
  e2:	19 f1       	breq	.+70     	; 0x12a <NUMTOSEG7+0x98>
  e4:	8f 35       	cpi	r24, 0x5F	; 95
  e6:	29 f5       	brne	.+74     	; 0x132 <NUMTOSEG7+0xa0>
  e8:	22 c0       	rjmp	.+68     	; 0x12e <NUMTOSEG7+0x9c>
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	08 95       	ret
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	08 95       	ret
  f2:	84 ea       	ldi	r24, 0xA4	; 164
  f4:	08 95       	ret
	{ 
		case 0: AA=0xc0;break;  // ‘0’
		case 1: AA=0xf9;break;  // ‘1’
		case 2: AA=0xa4;break;  // ‘2’
  f6:	80 eb       	ldi	r24, 0xB0	; 176
  f8:	08 95       	ret
		case 3: AA=0xb0;break;  // ‘3’
  fa:	89 e9       	ldi	r24, 0x99	; 153
  fc:	08 95       	ret
		case 4: AA=0x99;break;  // ‘4’
  fe:	82 e9       	ldi	r24, 0x92	; 146
 100:	08 95       	ret
		case 5: AA=0x92;break;  // ‘5’
 102:	82 e8       	ldi	r24, 0x82	; 130
 104:	08 95       	ret
		case 6: AA=0x82;break;  // ‘6’
 106:	88 ef       	ldi	r24, 0xF8	; 248
 108:	08 95       	ret
		case 7: AA=0xf8;break;  // ‘7’
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	08 95       	ret
		case 8: AA=0x80;break;  // ‘8’
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	08 95       	ret
		case 9: AA=0x90;break;  // ‘9’
 112:	88 e8       	ldi	r24, 0x88	; 136
 114:	08 95       	ret
		case 10: AA=0x88;break; // ‘A’
 116:	83 e8       	ldi	r24, 0x83	; 131
 118:	08 95       	ret
		case 11: AA=0x83;break; // ‘B’
 11a:	86 ec       	ldi	r24, 0xC6	; 198
 11c:	08 95       	ret
		case 12: AA=0xc6;break; // ‘C’
 11e:	81 ea       	ldi	r24, 0xA1	; 161
 120:	08 95       	ret
		case 13: AA=0xa1;break; // ‘D’
 122:	86 e8       	ldi	r24, 0x86	; 134
 124:	08 95       	ret
		case 14: AA=0x86;break; // ‘E’
 126:	8e e8       	ldi	r24, 0x8E	; 142
 128:	08 95       	ret
		case 15: AA=0x8e;break; // ‘F’
 12a:	8f ed       	ldi	r24, 0xDF	; 223
 12c:	08 95       	ret
		case '-':AA=0xdf;break; // 破折号
 12e:	87 ef       	ldi	r24, 0xF7	; 247
 130:	08 95       	ret
		case '_':AA=0xf7;break; // 下划线
 132:	8f ef       	ldi	r24, 0xFF	; 255
		case ' ':AA=0xff;break; // 消隐
		default: AA=0xff;
	}
	return(AA);
}
 134:	08 95       	ret

00000136 <display_led>:
void display_led(unsigned char seg,unsigned char sel)
{
  unsigned char i;
    
  //先将 sel 数据送74hc595
  PORTA &= ~(1<<PA7);         // PA7=0; rclk=0
 136:	df 98       	cbi	0x1b, 7	; 27
 138:	90 e0       	ldi	r25, 0x00	; 0
  for (i=0;i<8;i++)
    {
	  if ((sel & 0x80) == 0)  //最高位送 U2 SER 端
 13a:	67 fd       	sbrc	r22, 7
 13c:	02 c0       	rjmp	.+4      	; 0x142 <display_led+0xc>
	    PORTA &= ~(1<<PA5);   // PA5=0
 13e:	dd 98       	cbi	0x1b, 5	; 27
 140:	01 c0       	rjmp	.+2      	; 0x144 <display_led+0xe>
	  else
	    PORTA |= (1<<PA5);    //  PA5=1
 142:	dd 9a       	sbi	0x1b, 5	; 27
	  
	  PORTA &= ~(1<<PA6);     //PA6=0
 144:	de 98       	cbi	0x1b, 6	; 27
	  PORTA |= (1<<PA6);      //PA6=1  srclk=1，产生移位时钟信号
 146:	de 9a       	sbi	0x1b, 6	; 27
{
  unsigned char i;
    
  //先将 sel 数据送74hc595
  PORTA &= ~(1<<PA7);         // PA7=0; rclk=0
  for (i=0;i<8;i++)
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	98 30       	cpi	r25, 0x08	; 8
 14c:	11 f0       	breq	.+4      	; 0x152 <display_led+0x1c>
	    PORTA |= (1<<PA5);    //  PA5=1
	  
	  PORTA &= ~(1<<PA6);     //PA6=0
	  PORTA |= (1<<PA6);      //PA6=1  srclk=1，产生移位时钟信号
	  
	  sel <<= 1;              //sel 左移一位
 14e:	66 0f       	add	r22, r22
 150:	f4 cf       	rjmp	.-24     	; 0x13a <display_led+0x4>
 152:	90 e0       	ldi	r25, 0x00	; 0
    } 
  //再将 seg 数据送74hc595
  for (i=0;i<8;i++)
    {
	  if ((seg & 0x80) == 0)  //最高位送 U2 SER 端
 154:	87 fd       	sbrc	r24, 7
 156:	02 c0       	rjmp	.+4      	; 0x15c <display_led+0x26>
	    PORTA &= ~(1<<PA5);   //PA5=0
 158:	dd 98       	cbi	0x1b, 5	; 27
 15a:	01 c0       	rjmp	.+2      	; 0x15e <display_led+0x28>
	  else
	    PORTA |= (1<<PA5);    //PA5=1
 15c:	dd 9a       	sbi	0x1b, 5	; 27
		   
	  PORTA &= ~(1<<PA6);     //PA6=0
 15e:	de 98       	cbi	0x1b, 6	; 27
	  PORTA |= (1<<PA6);      //PA6=1  srclk=1，产生移位时钟信号
 160:	de 9a       	sbi	0x1b, 6	; 27
	  PORTA |= (1<<PA6);      //PA6=1  srclk=1，产生移位时钟信号
	  
	  sel <<= 1;              //sel 左移一位
    } 
  //再将 seg 数据送74hc595
  for (i=0;i<8;i++)
 162:	9f 5f       	subi	r25, 0xFF	; 255
 164:	98 30       	cpi	r25, 0x08	; 8
 166:	11 f0       	breq	.+4      	; 0x16c <display_led+0x36>
	    PORTA |= (1<<PA5);    //PA5=1
		   
	  PORTA &= ~(1<<PA6);     //PA6=0
	  PORTA |= (1<<PA6);      //PA6=1  srclk=1，产生移位时钟信号
	  
	  seg <<= 1;              //seg 左移一位 
 168:	88 0f       	add	r24, r24
 16a:	f4 cf       	rjmp	.-24     	; 0x154 <display_led+0x1e>
    } 
  PORTA |= (1<<PA7);      //  PA7=1; rclk=1
 16c:	df 9a       	sbi	0x1b, 7	; 27
  PORTA &= ~(1<<PA7);     //  PA7=0; rclk=0，产生锁存输出信号
 16e:	df 98       	cbi	0x1b, 7	; 27
}
 170:	08 95       	ret

00000172 <SPI_master_init>:

void SPI_master_init(void)
{
	PORTB = 0x00;
 172:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB7);	// PB3,4,5,7 are output
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	// LSB first: |(1<<DORD)
 178:	81 e5       	ldi	r24, 0x51	; 81
 17a:	8d b9       	out	0x0d, r24	; 13
}
 17c:	08 95       	ret

0000017e <Port_init>:

void Port_init( void )
{
	PORTA = 0x00; 
 17e:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0xE0; //PA口 PA7、PA6、PA5为输出
 180:	80 ee       	ldi	r24, 0xE0	; 224
 182:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0xf0; //PC口 PC7、PC6、PC5、PC4接上拉电阻
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	85 bb       	out	0x15, r24	; 21
	DDRC  = 0x00; //PC口 为输入
 188:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
 18a:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; // PD2 is input
 18c:	11 ba       	out	0x11, r1	; 17
}
 18e:	08 95       	ret

00000190 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
	//stop errant interrupts until set up
	cli(); //disable all interrupts
 190:	f8 94       	cli
  PORTA &= ~(1<<PA7);     //  PA7=0; rclk=0，产生锁存输出信号
}

void SPI_master_init(void)
{
	PORTB = 0x00;
 192:	18 ba       	out	0x18, r1	; 24
	DDRB = (1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB7);	// PB3,4,5,7 are output
 194:	88 eb       	ldi	r24, 0xB8	; 184
 196:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	// LSB first: |(1<<DORD)
 198:	81 e5       	ldi	r24, 0x51	; 81
 19a:	8d b9       	out	0x0d, r24	; 13
}

void Port_init( void )
{
	PORTA = 0x00; 
 19c:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0xE0; //PA口 PA7、PA6、PA5为输出
 19e:	80 ee       	ldi	r24, 0xE0	; 224
 1a0:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0xf0; //PC口 PC7、PC6、PC5、PC4接上拉电阻
 1a2:	80 ef       	ldi	r24, 0xF0	; 240
 1a4:	85 bb       	out	0x15, r24	; 21
	DDRC  = 0x00; //PC口 为输入
 1a6:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
 1a8:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00; // PD2 is input
 1aa:	11 ba       	out	0x11, r1	; 17
{
	//stop errant interrupts until set up
	cli(); //disable all interrupts
	SPI_master_init();
	Port_init();
	MCUCR = (1<<ISC01);	// int0 external interrupt on falling edge of int0
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	85 bf       	out	0x35, r24	; 53
	GICR  = (1<<INT0);	// enable the external interrupt int0
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	8b bf       	out	0x3b, r24	; 59
	sei(); //re-enable interrupts
 1b4:	78 94       	sei
	//all peripherals are now initialized
}
 1b6:	08 95       	ret

000001b8 <SPI_transition>:

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 1b8:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 1ba:	77 9b       	sbis	0x0e, 7	; 14
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <SPI_transition+0x2>
		;
	SPSR |= (1<<SPIF);
 1be:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 1c0:	8f b1       	in	r24, 0x0f	; 15
}
 1c2:	08 95       	ret

000001c4 <SPI_w_reg>:

void SPI_w_reg ( uint8_t reg, uint8_t val )
{
	PORTB &= ~(1<<PB4);
 1c4:	c4 98       	cbi	0x18, 4	; 24
	SPI_transition( W_REG | reg );
 1c6:	80 62       	ori	r24, 0x20	; 32
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 1c8:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 1ca:	77 9b       	sbis	0x0e, 7	; 14
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <SPI_w_reg+0x6>
		;
	SPSR |= (1<<SPIF);
 1ce:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 1d0:	8f b1       	in	r24, 0x0f	; 15
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 1d2:	6f b9       	out	0x0f, r22	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 1d4:	77 9b       	sbis	0x0e, 7	; 14
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <SPI_w_reg+0x10>
		;
	SPSR |= (1<<SPIF);
 1d8:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 1da:	8f b1       	in	r24, 0x0f	; 15
void SPI_w_reg ( uint8_t reg, uint8_t val )
{
	PORTB &= ~(1<<PB4);
	SPI_transition( W_REG | reg );
	SPI_transition( val );
	PORTB |= (1<<PB4);
 1dc:	c4 9a       	sbi	0x18, 4	; 24
}
 1de:	08 95       	ret

000001e0 <SPI_r_reg>:

uint16_t SPI_r_reg ( uint8_t reg )
{
	uint16_t tmp;
	PORTB &= ~(1<<PB4);
 1e0:	c4 98       	cbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 1e2:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 1e4:	77 9b       	sbis	0x0e, 7	; 14
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <SPI_r_reg+0x4>
		;
	SPSR |= (1<<SPIF);
 1e8:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 1ea:	3f b1       	in	r19, 0x0f	; 15
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 1f0:	77 9b       	sbis	0x0e, 7	; 14
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <SPI_r_reg+0x10>
		;
	SPSR |= (1<<SPIF);
 1f4:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 1f6:	2f b1       	in	r18, 0x0f	; 15
uint16_t SPI_r_reg ( uint8_t reg )
{
	uint16_t tmp;
	PORTB &= ~(1<<PB4);
	tmp = SPI_transition( R_REG | reg );
	tmp <<= 8;
 1f8:	93 2f       	mov	r25, r19
 1fa:	80 e0       	ldi	r24, 0x00	; 0
	tmp |= SPI_transition( 5 );
	PORTB |= (1<<PB4);
 1fc:	c4 9a       	sbi	0x18, 4	; 24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	28 2b       	or	r18, r24
 202:	39 2b       	or	r19, r25
	return tmp;
}
 204:	c9 01       	movw	r24, r18
 206:	08 95       	ret

00000208 <SPI_write_data>:

void SPI_write_data( uint8_t addr, uint8_t* ptr, uint8_t num )
{
	uint8_t i;
	PORTB &= ~(1<<PB4);
 208:	c4 98       	cbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 20a:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 20c:	77 9b       	sbis	0x0e, 7	; 14
 20e:	fe cf       	rjmp	.-4      	; 0x20c <SPI_write_data+0x4>
		;
	SPSR |= (1<<SPIF);
 210:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 212:	8f b1       	in	r24, 0x0f	; 15
 214:	fb 01       	movw	r30, r22
 216:	07 c0       	rjmp	.+14     	; 0x226 <SPI_write_data+0x1e>
	uint8_t i;
	PORTB &= ~(1<<PB4);
	SPI_transition( addr );
	for( i = 0; i < num; i++ )
	{
		SPI_transition( *ptr );
 218:	80 81       	ld	r24, Z
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 21a:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 21c:	77 9b       	sbis	0x0e, 7	; 14
 21e:	fe cf       	rjmp	.-4      	; 0x21c <SPI_write_data+0x14>
		;
	SPSR |= (1<<SPIF);
 220:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 222:	8f b1       	in	r24, 0x0f	; 15
	PORTB &= ~(1<<PB4);
	SPI_transition( addr );
	for( i = 0; i < num; i++ )
	{
		SPI_transition( *ptr );
		ptr++;
 224:	31 96       	adiw	r30, 0x01	; 1
void SPI_write_data( uint8_t addr, uint8_t* ptr, uint8_t num )
{
	uint8_t i;
	PORTB &= ~(1<<PB4);
	SPI_transition( addr );
	for( i = 0; i < num; i++ )
 226:	8e 2f       	mov	r24, r30
 228:	86 1b       	sub	r24, r22
 22a:	84 17       	cp	r24, r20
 22c:	a8 f3       	brcs	.-22     	; 0x218 <SPI_write_data+0x10>
	{
		SPI_transition( *ptr );
		ptr++;
	}
	PORTB |= (1<<PB4);
 22e:	c4 9a       	sbi	0x18, 4	; 24
	return;
}
 230:	08 95       	ret

00000232 <SPI_read_data>:

void SPI_read_data ( uint8_t addr, uint8_t* ptr, uint8_t num )
{
	uint8_t i;
	PORTB &= ~(1<<PB4);
 232:	c4 98       	cbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 234:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 236:	77 9b       	sbis	0x0e, 7	; 14
 238:	fe cf       	rjmp	.-4      	; 0x236 <SPI_read_data+0x4>
		;
	SPSR |= (1<<SPIF);
 23a:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 23c:	8f b1       	in	r24, 0x0f	; 15
 23e:	fb 01       	movw	r30, r22
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	07 c0       	rjmp	.+14     	; 0x252 <SPI_read_data+0x20>
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 244:	1f b8       	out	0x0f, r1	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 246:	77 9b       	sbis	0x0e, 7	; 14
 248:	fe cf       	rjmp	.-4      	; 0x246 <SPI_read_data+0x14>
		;
	SPSR |= (1<<SPIF);
 24a:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 24c:	8f b1       	in	r24, 0x0f	; 15
	uint8_t i;
	PORTB &= ~(1<<PB4);
	SPI_transition( addr );
	for ( i = 0; i < num ; i++ )
	{
		ptr[i] = SPI_transition( 0 );
 24e:	81 93       	st	Z+, r24
void SPI_read_data ( uint8_t addr, uint8_t* ptr, uint8_t num )
{
	uint8_t i;
	PORTB &= ~(1<<PB4);
	SPI_transition( addr );
	for ( i = 0; i < num ; i++ )
 250:	9f 5f       	subi	r25, 0xFF	; 255
 252:	94 17       	cp	r25, r20
 254:	b8 f3       	brcs	.-18     	; 0x244 <SPI_read_data+0x12>
	{
		ptr[i] = SPI_transition( 0 );
	}
	PORTB |= (1<<PB4);
 256:	c4 9a       	sbi	0x18, 4	; 24
}
 258:	08 95       	ret

0000025a <Tx_Packet>:

void Tx_Packet( uint8_t* rx_buf, uint8_t length )
{
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
 262:	16 2f       	mov	r17, r22
	PORTB &= ~(1<<PB3);	// disable nRF
 264:	c3 98       	cbi	0x18, 3	; 24

	PORTB &= ~(1<<PB4);
 266:	c4 98       	cbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Tx_Packet+0x12>
		;
	SPSR |= (1<<SPIF);
 270:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 272:	8f b1       	in	r24, 0x0f	; 15
{
	PORTB &= ~(1<<PB3);	// disable nRF

	PORTB &= ~(1<<PB4);
	SPI_transition( FLUSH_TX );
	PORTB |= (1<<PB4);
 274:	c4 9a       	sbi	0x18, 4	; 24
	SPI_write_data(W_REG + TX_ADDR, tx_addr , 5); 
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	63 e6       	ldi	r22, 0x63	; 99
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	45 e0       	ldi	r20, 0x05	; 5
 27e:	0e 94 04 01 	call	0x208	; 0x208 <SPI_write_data>
	SPI_write_data( W_TX_PAYLOAD, rx_buf, length );
 282:	80 ea       	ldi	r24, 0xA0	; 160
 284:	be 01       	movw	r22, r28
 286:	41 2f       	mov	r20, r17
 288:	0e 94 04 01 	call	0x208	; 0x208 <SPI_write_data>
	SPI_w_reg( CONF_REG, 0x6e); 	
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	6e e6       	ldi	r22, 0x6E	; 110
 290:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>

	PORTB |= (1<<PB3);	// enable nRF
 294:	c3 9a       	sbi	0x18, 3	; 24
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <Rx_Packet>:

void Rx_Packet( uint8_t * buf, uint8_t length )
{
 29e:	9c 01       	movw	r18, r24
 2a0:	46 2f       	mov	r20, r22
	PORTB &= ~(1<<PB3);
 2a2:	c3 98       	cbi	0x18, 3	; 24

	SPI_read_data( R_RX_PAYLOAD , buf , length );
 2a4:	81 e6       	ldi	r24, 0x61	; 97
 2a6:	b9 01       	movw	r22, r18
 2a8:	0e 94 19 01 	call	0x232	; 0x232 <SPI_read_data>

	PORTB &= ~(1<<PB4);
 2ac:	c4 98       	cbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 2ae:	81 ee       	ldi	r24, 0xE1	; 225
 2b0:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 2b2:	77 9b       	sbis	0x0e, 7	; 14
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <Rx_Packet+0x14>
		;
	SPSR |= (1<<SPIF);
 2b6:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 2b8:	8f b1       	in	r24, 0x0f	; 15

	SPI_read_data( R_RX_PAYLOAD , buf , length );

	PORTB &= ~(1<<PB4);
	SPI_transition( FLUSH_TX );
	PORTB |= (1<<PB4);
 2ba:	c4 9a       	sbi	0x18, 4	; 24

	SPI_w_reg( CONF_REG, 0x3f );	
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	6f e3       	ldi	r22, 0x3F	; 63
 2c0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>

	PORTB |= (1<<PB3);
 2c4:	c3 9a       	sbi	0x18, 3	; 24
}
 2c6:	08 95       	ret

000002c8 <init_nRF24L01>:

void init_nRF24L01(void)
{
	PORTB &= ~(1<<PB3);    // chip disable
 2c8:	c3 98       	cbi	0x18, 3	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ca:	85 e3       	ldi	r24, 0x35	; 53
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <init_nRF24L01+0x4>
	_delay_us( 10 );
	PORTB |= (1<<PB4);   // Spi disable  
 2d0:	c4 9a       	sbi	0x18, 4	; 24

	SPI_w_reg( CONF_REG, 0x3f);	// only enable the RX_DR interrupt
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	6f e3       	ldi	r22, 0x3F	; 63
 2d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	//SPI_w_reg( EN_AA, 0x01); 
	SPI_w_reg( EN_AA, 0);     
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_w_reg( EN_RXADDR, 0x01);    
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_w_reg( SETUP_AW, 0x03 );
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	63 e0       	ldi	r22, 0x03	; 3
 2ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	//SPI_w_reg( SETUP_RETR, 0x15 );	// wait 500uS, retransmit 5 times
	SPI_w_reg( SETUP_RETR, 0 );
 2f2:	84 e0       	ldi	r24, 0x04	; 4
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_w_reg( RF_CH, 0);
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_w_reg( RF_SETUP, 0x07);  
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	67 e0       	ldi	r22, 0x07	; 7
 306:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_w_reg( RX_PW_P0, 4);        
 30a:	81 e1       	ldi	r24, 0x11	; 17
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	SPI_write_data(W_REG + TX_ADDR, tx_addr , 5);    
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	63 e6       	ldi	r22, 0x63	; 99
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	45 e0       	ldi	r20, 0x05	; 5
 31a:	0e 94 04 01 	call	0x208	; 0x208 <SPI_write_data>
	SPI_write_data(W_REG + RX_ADDR_P0, rx_addr0, 5); 
 31e:	8a e2       	ldi	r24, 0x2A	; 42
 320:	68 e6       	ldi	r22, 0x68	; 104
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	45 e0       	ldi	r20, 0x05	; 5
 326:	0e 94 04 01 	call	0x208	; 0x208 <SPI_write_data>
	PORTB |= (1<<PB3);	// chip enable
 32a:	c3 9a       	sbi	0x18, 3	; 24
}
 32c:	08 95       	ret

0000032e <__vector_1>:

ISR( INT0_vect )
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	Rx_Packet( rx_buf , 4 );
 350:	8e e6       	ldi	r24, 0x6E	; 110
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	64 e0       	ldi	r22, 0x04	; 4
 356:	0e 94 4f 01 	call	0x29e	; 0x29e <Rx_Packet>

	SPI_w_reg( STATUS , 0x40 );
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	60 e4       	ldi	r22, 0x40	; 64
 35e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_w_reg>
	
	mes = rx_buf[i];
 362:	e0 91 91 00 	lds	r30, 0x0091
 366:	f0 91 92 00 	lds	r31, 0x0092
 36a:	e2 59       	subi	r30, 0x92	; 146
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	80 81       	ld	r24, Z
 370:	80 93 60 00 	sts	0x0060, r24

	display_led( NUMTOSEG7( mes ), 0x08 );
 374:	0e 94 49 00 	call	0x92	; 0x92 <NUMTOSEG7>
 378:	68 e0       	ldi	r22, 0x08	; 8
 37a:	0e 94 9b 00 	call	0x136	; 0x136 <display_led>
 37e:	88 e8       	ldi	r24, 0x88	; 136
 380:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 382:	20 e9       	ldi	r18, 0x90	; 144
 384:	31 e0       	ldi	r19, 0x01	; 1
 386:	f9 01       	movw	r30, r18
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <__vector_1+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38e:	d9 f7       	brne	.-10     	; 0x386 <__vector_1+0x58>
	_delay_ms( 500 );

	if(++i>=4) i=0;
 390:	80 91 91 00 	lds	r24, 0x0091
 394:	90 91 92 00 	lds	r25, 0x0092
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	90 93 92 00 	sts	0x0092, r25
 39e:	80 93 91 00 	sts	0x0091, r24
 3a2:	04 97       	sbiw	r24, 0x04	; 4
 3a4:	24 f0       	brlt	.+8      	; 0x3ae <__vector_1+0x80>
 3a6:	10 92 92 00 	sts	0x0092, r1
 3aa:	10 92 91 00 	sts	0x0091, r1
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <main>:


int main()
{
	init_devices();
 3d0:	0e 94 c8 00 	call	0x190	; 0x190 <init_devices>
	init_nRF24L01();
 3d4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_nRF24L01>
	PORTB |= (1<<PB4); 
 3d8:	c4 9a       	sbi	0x18, 4	; 24
	//all peripherals are now initialized
}

uint8_t SPI_transition(uint8_t data)
{
	SPDR = data;
 3da:	82 ee       	ldi	r24, 0xE2	; 226
 3dc:	8f b9       	out	0x0f, r24	; 15

	//this is an alternative choice with the Interrupt
	//if use ISR, then don't use this
	//if not use ISR, use this to waite.

	while( !(SPSR & (1<<SPIF)) )
 3de:	77 9b       	sbis	0x0e, 7	; 14
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <main+0xe>
		;
	SPSR |= (1<<SPIF);
 3e2:	77 9a       	sbi	0x0e, 7	; 14

	return SPDR;
 3e4:	8f b1       	in	r24, 0x0f	; 15
{
	init_devices();
	init_nRF24L01();
	PORTB |= (1<<PB4); 
	SPI_transition(0xe2);
	PORTB&=~(1<<PB4);
 3e6:	c4 98       	cbi	0x18, 4	; 24
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <main+0x18>

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
